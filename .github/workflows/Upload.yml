name: Upload KernelSU Next
on:
  workflow_dispatch:
    inputs:
        
      FILE:
        description: "手机型号"
        required: true
        type: choice
        options:
          - 'oneplus_13'
        default: 'oneplus_13'
        
      ANDROID_VERSION:
        description: "KMI安卓版本"
        required: true
        type: choice
        options:
          - 'android15'
        default: 'android15'
        
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        type: choice
        options:
          - '6.6'
        default: '6.6'

      bbr:
       description: "是否启用bbr算法(优化上行数据, 对手机日用无太大意义甚至可能负优化)"
       required: true
       type: choice
       options:
          - 'On'
          - 'Off'
       default: 'Off'

      proxy:
       description: "是否添加代理性能优化(MTK系列跑的时候请关闭否则出现恶性bug)"
       required: true
       type: choice
       options:
          - 'On'
          - 'Off'
       default: 'On'

      BRANCH:
        type: string
        description: "使用的分支"
        required: true
        default: "r4"

      BLACK_LIST:
        type: choice
        description: "如何去屏蔽一加内核模块？"
        required: true
        default: "scx_enable.patch"
        options:
          - "blacklist_module.patch"
          - "blacklist_module_danger.patch"
          - "humming_bird_blacklist.patch"
          - "haruhi_blacklist.patch"
          - "scx_enable.patch"
          - "fengchi_enable.patch"
          - "non"

      SUFFIX:
        type: string
        description: "自定义内核后缀 (不输入使用随机字符串)"
        required: false
        default: "KONATA"

      SUSFS_ENABLE:
        type: boolean
        description: "是否开启susfs？"
        required: true
        default: false

jobs:
  build:
    name: For ${{ github.event.inputs.FILE }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
      
    steps:
      # ====================== 系统初始化阶段 ======================
      - name: "🚀 Maximize Build Space | 最大化构建空间"
        if: ${{ github.event.inputs.KERNEL_VERSION == '6.1' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: "⚙️ Setup Cache Env | 设置缓存环境"
        run: |
          echo "🔧 正在设置机型隔离缓存目录..."
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FILE }}_Next" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FILE }}_Next"
          echo "✅ 缓存目录已设置: $HOME/.ccache_${{ github.event.inputs.FILE }}_Next" 

      - name: "🔐 Configure Git | 配置Git账户"
        run: |
          echo "🔧 正在配置Git用户信息..."
          git config --global user.name "build"
          git config --global user.email "2210077278@qq.com"
          echo "✅ Git配置完成"

      # ====================== 依赖管理阶段 ======================

      - name: "📦 Cache & Install Dependencies | 缓存 & 安装构建依赖"
        uses: awalsh128/cache-apt-pkgs-action@latest 
        with: 
          packages: python3 git curl
          execute_install_scripts: true

      # ====================== 源码准备阶段 ======================
      - name: "📥 Install Repo Tool | 安装Repo工具"
        run: |
          echo "⬇️ 正在下载repo工具..."
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          echo "✅ repo工具安装完成"

      - name: "⬇️ Clone Kernel Source | 克隆内核源码"
        run: |
          echo "🌐 正在初始化内核仓库..."
          mkdir kernel_workspace && cd kernel_workspace
          mkdir kernel_platform && cd kernel_platform
          # repo init -u https://github.com/Xiaomichael/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FILE }}.xml --depth=1

          git clone --depth 1 https://github.com/reigadegr/android_kernel_common_oneplus_sm8750 -b "${{ github.event.inputs.BRANCH }}" common2 &
          repo init -u https://android.googlesource.com/kernel/manifest -b common-android15-6.6 --depth=1
          
          sed -i '/external\//d' .repo/manifests/default.xml
          sed -i '/kleaf\//d' .repo/manifests/default.xml
          sed -i '/jdk11/d' .repo/manifests/default.xml
          sed -i '/mkbootimg/d' .repo/manifests/default.xml
          sed -i '/linux-glibc/d' .repo/manifests/default.xml
          sed -i '/clang-tools/d' .repo/manifests/default.xml
          sed -i '/build-tools/d' .repo/manifests/default.xml
          sed -i '/ndk/d' .repo/manifests/default.xml
          sed -i '/linux-x86/d' .repo/manifests/default.xml
          sed -i '/common-modules/d' .repo/manifests/default.xml
          
          echo "🔄 同步代码库(使用$(nproc --all)线程)..."
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          rm -rf common .repo
          until [ -z "$(pidof git)" ]; do
            echo "等一下git"
            sleep 1
          done
          mv common2 common
          echo "Kernel version:-${{ github.event.inputs.ANDROID_VERSION }}-oki"
          cd  ..
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion || true
          sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion || true
          sed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion || true

          echo "✅ 内核配置完成"

      - name: Custom Kernel Suffix if set
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |
          cd kernel_workspace/kernel_platform
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          KANDROID_VERSION="${{ github.event.inputs.ANDROID_VERSION }}"
          
          work_space=$(pwd)
          for path in common; do
            
            cd "$path"
            path="$(realpath scripts/setlocalversion)"

            echo "Modifying: $path"

            # Remove -dirty
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "Detected NEW setlocalversion format"
              wget https://github.com/reigadegr/sun_action/raw/main/utils/gen_dev_name.sh
              sh gen_dev_name.sh "${SUFFIX}"
              full="${KERNELVERSION}-${KANDROID_VERSION}-${SUFFIX}"
              full="$(cat tmp)"
              git add  .; git commit -m "auto commit" || echo "无需提交"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"${full}\"|" "$path"
              git diff
            elif grep -q 'echo "\$res"' "$path"; then
              echo "Detected OLD setlocalversion format"
              echo "快速构建 enabled: using static res"
              sed -i "s/^res=.*/res=\"-${KANDROID_VERSION}-${SUFFIX}\"/" "$path"
            else
              echo "Unknown format, appending echo manually"
              echo "echo \"\$res-${SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done

       # ====================== 内核定制阶段 ======================
                
      - name: "⚡ Setup Baseband-guard | 配置 Baseband-guard"
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common
          curl -sSL https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh -o setup.sh
          bash setup.sh
          
      - name: "⚡ Setup KernelSU Next | 配置 KernelSU Next"
        run: |
          cd kernel_workspace/kernel_platform
          echo "🛠️ 正在设置KernelSU Next..."
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          else
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
           fi
          cd KernelSU-Next
          KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/KernelSU-Next/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "✅ KernelSU Next 配置完成"
        
      - name: "🔧 Setup SUSFS | 配置 SUSFS"
        run: |
          cd kernel_workspace
          echo "⬇️ 下载SUSFS补丁..."
          git clone --depth 1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone --depth 1 https://github.com/Xiaomichael/kernel_patches.git
          git clone --depth 1 https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "📝 复制补丁文件..."
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
           
          cp ../kernel_patches/zram/001-lz4.patch ./common/
          cp ../kernel_patches/zram/lz4armv8.S ./common/lib
          cp ../kernel_patches/zram/002-zstd.patch ./common/

          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
           
          # Apply patches
          echo "🔧 应用补丁..."
          cd ./common
          # echo "📦 应用lz4+zstd补丁..."
          # patch -p1 -F 3 < 001-lz4.patch
          # patch -p1 -F 3 < 002-zstd.patch
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              patch -p1 -F 3 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
          fi
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          echo "✅ 所有补丁应用完成"

      # OGKI转换GKI，无需修改 dtbo 开机
      - name: Apply Convert HMBIRD_OGKI to HMBIRD_GKI
        run: |
          cd kernel_workspace/kernel_platform/common
          blacklist="${{ github.event.inputs.BLACK_LIST }}"
          if [ "$blacklist" != "blacklist_module_danger.patch" ] && [ "$blacklist" != "haruhi_blacklist.patch" ] && [ "$blacklist" != "fengchi_enable.patch" ]; then
              sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
              wget https://github.com/reigadegr/sun_action/raw/main/patchs/6.6/hmbird_patch.patch
              echo "正在打OGKI转换GKI补丁"
              patch -p1 -F 3 < hmbird_patch.patch
              echo "OGKI转换GKI_patch完成"
          else
              echo "使用$blacklist不需要打补丁"
          fi

      - name: Remove OnePlus Kernel Module
        run: |          
          cd kernel_workspace/kernel_platform/common       
          git add  . && git commit -m "auto commit"
          patch_profile="${{ github.event.inputs.BLACK_LIST }}"
          wget https://github.com/reigadegr/sun_action/raw/main/patchs/6.6/blacklist_module_profile/"$patch_profile" || true
          patch -p1 -F 3 < "./$patch_profile" && git add  . && git commit -m "移除不需要的内核模块" || git reset --hard
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./build.config.gki
          echo "移除内核模块完成"

      - name: Fix upstream bugs
        run: |          
          cd kernel_workspace/kernel_platform/common
          git add  . && git commit -m "auto commit"
          for i in "fix_screen_off_crash.patch" \
            "fix_screen_flicker.patch" \
            "unlock_cpufreq.patch" \
            "fix_usb_network_share.patch" \
            "ignore_module_check.patch" \
            "fix_sme_error.patch" \
            "enable_sme.patch"; do
             wget https://github.com/reigadegr/sun_action/raw/main/patchs/6.6/$i
             patch -p1 -F 3 < $i && git add  . && git commit -m "$i commit" || git reset --hard
             git clean -df
          done

      - name: "⚙️ Configure Kernel Options | 配置内核选项"
        run: |
          echo "⚙️ 正在配置内核编译选项..."
          cd kernel_workspace/kernel_platform
          
          echo "📦 启用 Manual Hook..."
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              # Add SUSFS configuration settings
              echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "⚡ 启用BBG防格机..."
          echo 'CONFIG_BBG=y' >> ./common/arch/arm64/configs/gki_defconfig
          echo 'CONFIG_LSM="landlock,lockdown,yama,loadpin,safesetid,integrity,selinux,smack,tomoyo,apparmor,bpf,baseband_guard"' >> ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ github.event.inputs.bbr }}" == "On" ]; then
            echo "🌐 启用BBR网络算法..."
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi

          # Add O2 config
          echo "📦 加入O2优化..."
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          if [ "${{ github.event.inputs.proxy }}" == "On" ]; then
            # Add proxy config
            echo "CONFIG_BPF_STREAM_PARSER=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_MAX=65534" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_MAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_LIST_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
            
          sed -i 's/check_defconfig//' ./common/build.config.gki
          echo "✅ 内核配置更新完成"
      # 配置信息,带*为附加项目,具有一定危险性和不确定性
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          
          # ECN配置*
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          
          # lto thin，O2 
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG=y" >> "$CONFIG_FILE"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$CONFIG_FILE"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "$CONFIG_FILE"
          echo "CONFIG_LLVM_POLLY=y" >> "$CONFIG_FILE"
          echo "CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y" >> "$CONFIG_FILE"
          echo "CONFIG_AUTOFDO_CLANG=y" >> "$CONFIG_FILE"
          
          # Inline zram                   
          echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_DEF_COMP_ZSTD=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_DEF_COMP=\"zstd\"" >> "$CONFIG_FILE"
          
          # TMPFS配置*
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

          # cmdline优化性能
          echo "CONFIG_CMDLINE=\"console=ttynull nokaslr stack_depot_disable=on cgroup_disable=pressure kasan=off kvm-arm.mode=protected bootconfig thp_anon=16K-2M:always mitigations=off kpti=0 hardened_usercopy=off audit=0 norandmaps arm64.nobti arm64.nomte arm64.nopauth\"" >> "$CONFIG_FILE"
          echo "CONFIG_CMDLINE_FROM_BOOTLOADER=n" >> "$CONFIG_FILE"
          echo "CONFIG_CMDLINE_EXTEND=y" >> "$CONFIG_FILE"
          
          # 防止单点故障导致系统崩溃
          echo "CONFIG_PANIC_ON_OOPS=n" >> "$CONFIG_FILE"
          echo "CONFIG_PANIC_ON_OOPS_VALUE=0" >> "$CONFIG_FILE"
          blacklist="${{ github.event.inputs.BLACK_LIST }}"
          if [ "$blacklist" = "blacklist_module_danger.patch" ] || [ "$blacklist" = "haruhi_blacklist.patch" ]; then
              # qcom llcc
              echo "CONFIG_QCOM_LLCC=y" >> "$CONFIG_FILE"
              # walt scheduler
              echo "CONFIG_SCHED_WALT=y" >> "$CONFIG_FILE"
          else
              echo "CONFIG_QCOM_LLCC=n" >> "$CONFIG_FILE"
              # walt scheduler
              echo "CONFIG_SCHED_WALT=n" >> "$CONFIG_FILE"
          fi
          # 透明大页
          echo "CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS=y" >> "$CONFIG_FILE"   
          echo "CONFIG_TRANSPARENT_HUGEPAGE_MADVISE=n" >> "$CONFIG_FILE"
          
          echo "CONFIG_CFI_PERMISSIVE=y" >> "$CONFIG_FILE"
          echo "CONFIG_SLAB_MERGE_DEFAULT=y" >> "$CONFIG_FILE"
          echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> "$CONFIG_FILE"
          echo "CONFIG_DMABUF_HUGETLB=y" >> "$CONFIG_FILE"
          echo "CONFIG_ARM64_SME=y" >> "$CONFIG_FILE"
          
          echo "CONFIG_PCIEASPM_POWER_SUPERSAVE=y" >> "$CONFIG_FILE"
          echo "CONFIG_KFENCE_STATIC_KEYS=y" >> "$CONFIG_FILE"
          
          # 模块签名校验          
          echo "CONFIG_MODULE_SIG_PROTECT=n" >> "$CONFIG_FILE"
          
          # 幽灵漏洞
          echo "CONFIG_MITIGATE_SPECTRE_BRANCH_HISTORY=n" >> "$CONFIG_FILE"
          echo "CONFIG_UNMAP_KERNEL_AT_EL0=n" >> "$CONFIG_FILE"

          # 内核静态字段只读(默认开启保护)
          echo "CONFIG_RODATA_FULL_DEFAULT_ENABLED=y" >> "$CONFIG_FILE"

          # # 关闭部分安全特性(开启也会导致各种符号版本错误)
          # echo "CONFIG_SLAB_FREELIST_RANDOM=n" >> "$CONFIG_FILE"
          # echo "CONFIG_SHUFFLE_PAGE_ALLOCATOR=n" >> "$CONFIG_FILE"
          # echo "CONFIG_SLAB_FREELIST_HARDENED=n" >> "$CONFIG_FILE"
          
          # # 堆栈保护关闭
          # echo "CONFIG_STACKPROTECTOR_PER_TASK=n" >> "$CONFIG_FILE"
          
          # 优化内存策略(放心开启)
          echo "CONFIG_RCU_LAZY_DEFAULT_OFF=n" >> "$CONFIG_FILE"
          echo "CONFIG_TASKS_TRACE_RCU_READ_MB=y" >> "$CONFIG_FILE"
          echo "CONFIG_RCU_NOCB_CPU_DEFAULT_ALL=y" >> "$CONFIG_FILE"
          echo "CONFIG_ANON_MIN_RATIO=5" >> "$CONFIG_FILE"
          echo "CONFIG_CLEAN_LOW_RATIO=2" >> "$CONFIG_FILE"
          echo "CONFIG_CLEAN_MIN_RATIO=1" >> "$CONFIG_FILE"
          
          # 华为auth qos
          echo "CONFIG_AUTHORITY_CTRL=y" >> "$CONFIG_FILE"
          echo "CONFIG_QOS_CTRL=y" >> "$CONFIG_FILE"
          echo "CONFIG_QOS_AUTHORITY=y" >> "$CONFIG_FILE"
          echo "CONFIG_QOS_POLICY_MAX_NR=5" >> "$CONFIG_FILE"
                    
          echo "CONFIG_UDMABUF=y" >> "$CONFIG_FILE"
          # # 禁用io调度器
          echo "CONFIG_MQ_IOSCHED_KYBER=n" >> "$CONFIG_FILE"
          
          # 控制可选功能(放心使用本代码)
          echo "CONFIG_DAMON=n" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y" >> "$CONFIG_FILE"
          echo "CONFIG_VIRTIO_PCI_LEGACY=y" >> "$CONFIG_FILE"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y" >> "$CONFIG_FILE"
          echo "CONFIG_HEADERS_INSTALL=n" >> "$CONFIG_FILE"
          echo "CONFIG_PROC_MEM_ALWAYS_FORCE=n" >> "$CONFIG_FILE"
          
          echo "CONFIG_DTPM=n" >> "$CONFIG_FILE"
          echo "CONFIG_IDLE_INJECT=n" >> "$CONFIG_FILE"
     
          # 无用kunit
          echo "CONFIG_FAT_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_EXT4_KUNIT_TESTS=n" >> "$CONFIG_FILE"          
          echo "CONFIG_RTC_LIB_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_CLK_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_CLK_GATE_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_IIO_FORMAT_KUNIT_TESTAULT=n" >> "$CONFIG_FILE"          
          echo "CONFIG_INPUT_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_SND_SOC_UTILS_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_HID_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_REGMAP_KUNIT=n" >> "$CONFIG_FILE"
          echo "CONFIG_TIME_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_NETDEV_ADDR_LIST_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_IIO_FORMAT_KUNIT_TEST=n" >> "$CONFIG_FILE"

          # 修各种abi不兼容
          # 蓝牙
          patch_profile="${{ github.event.inputs.BLACK_LIST }}"
          if [ "$patch_profile" = "blacklist_module_danger.patch" ] || [ "$patch_profile" = "blacklist_module.patch" ] || [ "$patch_profile" = "scx_enable.patch" ] || [ "$patch_profile" = "fengchi_enable.patch" ] ; then
              echo "CONFIG_RFKILL=y" >> "$CONFIG_FILE"
              echo "CONFIG_BT=y" >> "$CONFIG_FILE"
              echo "CONFIG_BT_RFCOMM=y" >> "$CONFIG_FILE"
              echo "CONFIG_BT_HIDP=y" >> "$CONFIG_FILE"
              echo "CONFIG_TLS=y" >> "$CONFIG_FILE"
          fi
          
          # 移除无意义的内容
          echo "CONFIG_UBSAN=n">> "$CONFIG_FILE"
          echo "CONFIG_UBSAN_TRAP=n" >> "$CONFIG_FILE"
          echo "CONFIG_UBSAN_BOUNDS=n" >> "$CONFIG_FILE"
          echo "CONFIG_IKHEADERS=n" >> "$CONFIG_FILE"
          # 移除构建审查
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      # ====================== 上传阶段 ======================
      - name: "🧠 Set Artifact Name | 设置产物名称"
        id: set_name
        run: |
          echo "ARTIFACT_NAME=${{ github.event.inputs.FILE }}_KernelSU_Next_${{ env.KSUVER }}" >> $GITHUB_OUTPUT

      - name: "📤 Upload AnyKernel3 | 上传 源代码"
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.extract_info.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./kernel_workspace/kernel_platform/common/*

      - name: 📊 Post-build disk check (构建后空间检查)
        run: df -h