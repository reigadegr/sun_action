name: DebugBuild_clang21
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: choice
        description: "ÈÖçÁΩÆÊñá‰ª∂"
        required: true
        default: oneplus_13t
        options:
          - oneplus_nord_ce4_lite_5g_v
          - oneplus_nord_ce4_v
          - oneplus_nord_4_v
          - oneplus_ace_3v_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad_pro_v
          - oneplus_pad2_v
          - oneplus_ace5_pro
          - oneplus_13
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
      KSU_META:
        type: choice
        description: "ÂàÜÊîØÂêç(‰∏çÂèØÁïôÁ©∫)/Ëá™ÂÆö‰πâÁâàÊú¨Ê†áËØÜ(ÁïôÁ©∫‰∏ç‰øÆÊîπ)"
        required: false
        default: "main/OPMod"
        options:
          - "susfs-main/OPMod"
          - "main/OPMod"
      SUFFIX:
        type: string
        description: "Ëá™ÂÆö‰πâÂÜÖÊ†∏ÂêéÁºÄ (‰∏çËæìÂÖ•‰ΩøÁî®ÈöèÊú∫Â≠óÁ¨¶‰∏≤)"
        required: false
        default: "KONATA"
      BRANCH:
        type: string
        description: "‰ΩøÁî®ÁöÑÂàÜÊîØ"
        required: true
        default: "gki15"
      BLACK_LIST:
        type: choice
        description: "Â¶Ç‰ΩïÂéªÂ±èËîΩ‰∏ÄÂä†ÂÜÖÊ†∏Ê®°ÂùóÔºü"
        required: true
        default: "blacklist_module_danger.patch"
        options:
          - "blacklist_module.patch"
          - "blacklist_module_danger.patch"
          - "humming_bird_blacklist.patch"
          - "haruhi_blacklist.patch"
          - "scx_enable.patch"
          - "non"
      SUSFS_ENABLE:
        type: boolean
        description: "ÊòØÂê¶ÂºÄÂêØsusfsÔºü"
        required: true
        default: false
      HOOK:
        type: choice
        description: "Èí©Â≠êÈÄâÊã©"
        required: true
        default: manual
        options:
          - kprobe
          - manual
          - tracepoint
      KPM:
        type: boolean
        description: "ÊòØÂê¶ÂêØÁî®ÂÜÖÊ†∏Ê®°Âùó(KPM)Ôºü"
        required: true
        default: false


jobs:
  build:
    name: ${{ github.event.inputs.KPM == 'true' && ' [KPM]' || '' }}For ${{ github.event.inputs.FILE }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auto Extract
        id: extract_info
        run: |
          set -e
          cd "$GITHUB_WORKSPACE"
          declare -A KVERSION_MAP=(
            ["oneplus_nord_ce4_lite_5g"]="android14 6.1"
            ["oneplus_nord_ce4"]="android14 5.15"
            ["oneplus_nord_4"]="android14 6.1"
            ["oneplus_ace_3v"]="android14 6.1"
            ["oneplus_10_pro"]="android12 5.10"
            ["oneplus_10t"]="android12 5.10"
            ["oneplus_11r"]="android12 5.10"
            ["oneplus_ace2"]="android12 5.10"
            ["oneplus_ace_pro"]="android12 5.10"
            ["oneplus_11"]="android13 5.15"
            ["oneplus_12r"]="android13 5.15"
            ["oneplus_ace2_pro"]="android13 5.15"
            ["oneplus_ace3"]="android13 5.15"
            ["oneplus_open"]="android13 5.15"
            ["oneplus12"]="android14 6.1"
            ["oneplus_13r"]="android14 6.1"
            ["oneplus_ace3_pro"]="android14 6.1"
            ["oneplus_ace5"]="android14 6.1"
            ["oneplus_pad_pro"]="android14 6.1"
            ["oneplus_pad2"]="android14 6.1"
            ["oneplus_ace5_pro"]="android15 6.6"
            ["oneplus_13"]="android15 6.6"
            ["oneplus_13t"]="android15 6.6"
            ["oneplus_13s"]="android15 6.6"
            ["oneplus_pad_2_pro"]="android15 6.6"
            ["oneplus_pad_3"]="android15 6.6"
          )
          FILE="${{ github.event.inputs.FILE }}"
          if [[ "$FILE" =~ ^(.+)_([a-zA-Z])$ ]]; then
            FILE_BASE="${BASH_REMATCH[1]}"
          else
            FILE_BASE="$FILE"
          fi
          mkdir -p ".repo/manifests_fallback"
          XML_PATH=".repo/manifests_fallback/${FILE}.xml"
          README_PATH=".repo/manifests_fallback/README.md"
          echo "Â§ÑÁêÜ FILE=$FILE, BASE=$FILE_BASE"
          echo "üåê ÊãâÂèñ OnePlus manifest ÂàÜÊîØÂàóË°®..."
          BRANCHES=$(curl -s https://api.github.com/repos/OnePlusOSS/kernel_manifest/branches | jq -r '.[].name')

          FOUND=""
          for BRANCH in $BRANCHES; do
            XML_URL="https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/$BRANCH/${FILE}.xml"
            README_URL="https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/$BRANCH/README.md"
            if curl -sf --head "$XML_URL" > /dev/null; then
              echo "‚úÖ XML: $BRANCH"
              curl -s -o "$XML_PATH" "$XML_URL"
              curl -s -o "$README_PATH" "$README_URL"
              FOUND="$BRANCH"
              break
            fi
          done

          if [[ -z "$FOUND" || ! -s "$XML_PATH" ]]; then
            echo "‚ùå Êó†Ê≥ïÊâæÂà∞ ${FILE}.xml"
            exit 1
          fi
          echo "üì• ‰∏ãËΩΩÂÆåÊàêÔºåÂºÄÂßãÊèêÂèñ revision..."

          # Ëß£Êûê revision Â≠óÁ¨¶‰∏≤
          REVISION=$(grep -oP '<project[^>]+revision="\K[^"]+' "$XML_PATH" | head -n1 || true)
          echo "Ëß£Êûê FILE Ëé∑Âèñ CPU Âíå ANDROID_VERSION..."
          # ÊèêÂèñ CPU
          CPU=$(echo "$REVISION" | grep -oP 'sm\d+')
          # ÊèêÂèñ ANDROID_VERSION
          ANDROID_VERSION=$(echo "$REVISION" | grep -oP '\d{1,2}\.\d{1,2}(\.\d{1,2})?')

          if [[ -n "$CPU" && -n "$ANDROID_VERSION" ]]; then
            echo "‚úÖ CPU=$CPU, ANDROID_VERSION=$ANDROID_VERSION"
            echo "CPU=$CPU" >> $GITHUB_ENV
            echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
          else
            echo "‚ùå Êó†Ê≥ï‰ªé revision ‰∏≠ÊèêÂèñ CPU Êàñ ANDROID_VERSION"
            exit 1
          fi
          echo "Ëß£Êûê KVERSION_MAP Ëé∑Âèñ KANDROID_VERSION Âíå KERNEL_VERSION..."
          if [[ -n "${KVERSION_MAP[$FILE_BASE]}" ]]; then
            read -r KANDROID_VERSION KERNEL_VERSION <<< "${KVERSION_MAP[$FILE_BASE]}"
            echo "‚úÖ KVERSION_MAP[$FILE_BASE] = $KANDROID_VERSION $KERNEL_VERSION"
            echo "KANDROID_VERSION=$KANDROID_VERSION" >> $GITHUB_ENV
            echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          else
            echo "‚ùå KVERSION_MAP ‰∏≠Ê≤°ÊúâÊâæÂà∞ $FILE_BASE ÂØπÂ∫îÁöÑÁâàÊú¨‰ø°ÊÅØ"
          fi
          echo "Ëß£Êûê README.md Ëé∑Âèñ CPUD Âíå BUILD_METHOD..."
          if [[ -s "$README_PATH" ]]; then
            BUILD_LINE=$(grep -m1 'oplus_build_kernel.sh' "$README_PATH" || true)
            if [[ -n "$BUILD_LINE" ]]; then
              CPUD=$(echo "$BUILD_LINE" | awk '{print $(NF-1)}')
              BUILD_METHOD=$(echo "$BUILD_LINE" | awk '{print $NF}')
              echo "‚úÖ CPUD=$CPUD, BUILD_METHOD=$BUILD_METHOD"
              echo "CPUD=$CPUD" >> $GITHUB_ENV
              echo "BUILD_METHOD=$BUILD_METHOD" >> $GITHUB_ENV
            else
              echo "‚ùå README.md ‰∏≠Êú™ÊâæÂà∞ÊûÑÂª∫ÂëΩ‰ª§"
            fi
          else
            echo "‚ùå README.md ‰∏ãËΩΩÂ§±Ë¥•Êàñ‰∏∫Á©∫"
          fi
          # ‰º†ÈÄícleanÂêéÁöÑÊñá‰ª∂‰ø°ÊÅØ
          echo "value=${FILE_BASE}_Android${ANDROID_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Debug Show Selected Inputs
        run: |
          echo "-----------------------"
          echo "Selected CPU: ${{ env.CPU }}"
          echo "Selected CPUD: ${{ env.CPUD }}"
          echo "Selected KANDROID_VERSION: ${{ env.KANDROID_VERSION }}"
          echo "Selected ANDROID_VERSION: ${{ env.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ env.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ env.BUILD_METHOD }}"
          echo "Selected FILE: ${{ github.event.inputs.FILE }}"
          echo "Custom KSU_META: ${{ github.event.inputs.KSU_META }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo -n "SUFFIX Unicode: "
          python3 -c "print(''.join(f'U+{ord(c):04X} ' for c in '''${{ github.event.inputs.SUFFIX }}'''))"
          echo "Selected SUSFS_ENABLE: ${{ github.event.inputs.SUSFS_ENABLE }}"
          echo "Selected HOOK: ${{ github.event.inputs.HOOK }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"

      - name: Check Disk Space
        run: df -h

      - name: Setup TimeZone
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Set Cache Environment
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FILE }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FILE }}"
          echo "set: $HOME/.ccache_${{ github.event.inputs.FILE }}"

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Configure APTC
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: Set APT Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/OriginBuild21.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip \
            lsb-release linux-modules-extra-"$(uname -r)" ccache pahole \
            git automake flex bison build-essential zlib1g-dev make \
            libelf-dev libssl-dev openssl bc device-tree-compiler gzip \
            python3-telethon python-is-python3 zip unzip zstd libzstd-dev pigz \
            libncurses-dev asciidoc dos2unix lz4 fakeroot python3 python3-pip \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi gcc-arm-linux-gnueabihf \
            libc6-dev-armel-cross libc6-dev-armhf-cross libc6-dev-arm64-cross \
            selinux-policy-dev

      - name: Optimize Memory Management
        run: |
          sudo -E sysctl vm.swappiness=1
          sudo -E sysctl vm.min_free_kbytes=32768
          sudo -E sysctl vm.watermark_scale_factor=100
          sudo -E sysctl vm.watermark_boost_factor=15000
          sudo -E sysctl vm.overcommit_memory=1
          sudo -E sysctl vm.page-cluster=0
          sudo -E modprobe zram
          echo "0" | sudo -E tee /sys/class/block/zram0/mem_limit
          echo "zstd" | sudo -E tee /sys/class/block/zram0/comp_algorithm
          echo "$(awk 'NR==1{print $2*1000}' </proc/meminfo)" | sudo -E tee /sys/class/block/zram0/disksize
          sudo -E mkswap /dev/zram0
          sudo -E swapon -p 100 /dev/zram0
          echo "Y" | sudo -E tee /sys/kernel/mm/lru_gen/enabled
          echo "1000" | sudo -E tee /sys/kernel/mm/lru_gen/min_ttl_ms
          echo "1" | sudo -E tee /sys/kernel/mm/swap/vma_ra_enabled
        
      - name: Restore Ccache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref_name }}-${{ github.event.inputs.FILE }}-${{ env.BUILD_METHOD }}-15

      - name: Initialize Ccache
        run: |
          INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "ÂàùÂßãÂåñ ccache (${{ env.CCACHE_DIR }})..."
              mkdir -p "${{ env.CCACHE_DIR }}"
              ccache -M ${{ env.CCACHE_MAXSIZE }}
              touch "$INIT_FLAG"
              echo "‚úÖ ccache ÂàùÂßãÂåñÂÆåÊàê"
            else
              echo "‚úÖ ccache Â∑≤ÂàùÂßãÂåñÔºåË∑≥Ëøá"
            fi
          else
            echo "‚ùå Êú™ÂÆâË£Ö ccacheÔºåË∑≥Ëøá"
          fi
          ccache -s

      - name: Install Repo Tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize Repo and Sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          mkdir kernel_platform && cd kernel_platform
          # repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ env.CPU }} -m ${{ github.event.inputs.FILE }}.xml --depth=1
          git clone --depth 1 https://github.com/reigadegr/android_kernel_common_oneplus_sm8750 -b "${{ github.event.inputs.BRANCH }}" common2 &
          repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b common-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          
          sed -i '/external\//d' .repo/manifests/default.xml
          sed -i '/kleaf\//d' .repo/manifests/default.xml
          sed -i '/jdk11/d' .repo/manifests/default.xml
          sed -i '/mkbootimg/d' .repo/manifests/default.xml
          sed -i '/linux-glibc/d' .repo/manifests/default.xml
          sed -i '/clang-tools/d' .repo/manifests/default.xml
          sed -i '/build-tools/d' .repo/manifests/default.xml
          sed -i '/ndk/d' .repo/manifests/default.xml
          sed -i '/linux-x86/d' .repo/manifests/default.xml
          sed -i '/common-modules/d' .repo/manifests/default.xml
          
          repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          rm -rf common .repo
          until [ -z "$(pidof git)" ]; do
            echo "Á≠â‰∏Ä‰∏ãgit"
            sleep 1
          done
          mv common2 common
          cd  ..
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      # Ëá™ÂÆö‰πâÂÜÖÊ†∏ÂêéÁºÄ
      - name: Custom Kernel Suffix if set
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |
          cd kernel_workspace/kernel_platform
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          KANDROID_VERSION="${{ env.KANDROID_VERSION }}"
          echo "1"
          [ -d common ] && cd common
          path=scripts/setlocalversion
          echo "Modifying: $path"
          ls $path
          echo "2" 
          # Remove -dirty
          sed -i 's/ -dirty//g' "$path"
          echo "3"
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"
          echo "4"
          if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "Detected NEW setlocalversion format"
              wget https://github.com/reigadegr/sun_action/raw/main/utils/gen_dev_name.sh
              sh gen_dev_name.sh "${SUFFIX}"
              full="$(cat tmp)"
              echo $full
              echo "tmp $(cat tmp)
              git add  .; git commit -m "auto commit" || echo "‰∏çÁî®Êèê‰∫§"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"${full}\"|" "$path"
              git diff
            # elif grep -q 'echo "\$res"' "$path"; then
              # echo "Detected OLD setlocalversion format"
              # echo "Âø´ÈÄüÊûÑÂª∫ enabled: using static res"
              # sed -i "s/^res=.*/res=\"-${KANDROID_VERSION}-${SUFFIX}\"/" "$path"
            # else
              # echo "Unknown format, appending echo manually"
              # echo "echo \"\$res-${SUFFIX}\"" >> "$path"
          fi
          chmod +x "$path"
          git add  .; git commit -m "auto commit" || echo "‰∏çÁî®Êèê‰∫§"

          # git add -A
          # git commit -m "Custom suffix & removed -dirty"

      # ‰º™ÂÆòÊñπÊ†ºÂºèÁöÑÈöèÊú∫ÂêéÁºÄÔºà‰ªÖÂú® SUFFIX Êú™ËÆæÁΩÆÊó∂ÁîüÊïàÔºâ*
      - name: Custom Kernel Random Suffix if empty
        if: ${{ github.event.inputs.SUFFIX == '' }}
        run: |
          cd kernel_workspace
          KANDROID_VERSION="${{ env.KANDROID_VERSION }}"          

          # ÁîüÊàêÈöèÊú∫Êï∞Â≠óÂíåÈöèÊú∫hash
          RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
          RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
          RANDOM_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"

          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            echo "Modifying: $path"

            # Remove -dirty
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "Detected NEW setlocalversion format"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${KANDROID_VERSION}-${RANDOM_SUFFIX}\"|" "$path"

            elif grep -q 'echo "\$res"' "$path"; then
              echo "Detected OLD setlocalversion format"
                echo "Âø´ÈÄüÊûÑÂª∫ enabled: using static res with random suffix"
                sed -i "s/^res=.*/res=\"-${KANDROID_VERSION}-${RANDOM_SUFFIX}\"/" "$path"
            else
              echo "Unknown format, appending echo manually"
              echo "echo \"\$res-${RANDOM_SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done

          # git add -A
          # git commit -m "Random suffix & remove -dirty"

      - name: Add SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform

          META="${{ github.event.inputs.KSU_META }}"
          BRANCH_NAME="${META%%/*}"
          CUSTOM_TAG="${META#*/}"
          echo "ÂàÜÊîØÂêç: $BRANCH_NAME"
          echo "Ëá™ÂÆö‰πâÁâàÊú¨Ê†áËØÜ: $CUSTOM_TAG"

          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
          cd ./KernelSU

          KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')

          if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
            KSU_API_VERSION="3.1.7"
          fi

          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

          GIT_HASH=$(git rev-parse --short HEAD)
          echo "GIT_HASH=$GIT_HASH"

          if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
            VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
          else
            VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME"
          fi

          sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile

          VERSION_DEFINITIONS=$(cat <<EOF
            define get_ksu_version_full
            $VERSION_FULL
            endef

            KSU_VERSION_API := $KSU_API_VERSION
            KSU_VERSION_FULL := $VERSION_FULL
          EOF
          )

          awk -v def="$VERSION_DEFINITIONS" '
            /REPO_OWNER :=/ {print; print def; inserted=1; next}
            1
            END {if (!inserted) print def}
          ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

          echo "::group::ÊúÄÁªà Makefile ‰∏≠ÁâàÊú¨‰ø°ÊÅØÂèäÈÉ®ÂàÜË∞ÉËØïÁªìÊûúÈ¢ÑËßà"
          grep -A10 "REPO_OWNER" kernel/Makefile
          grep "KSU_VERSION_FULL" kernel/Makefile
          echo "::endgroup::"

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }} --depth 1
          git clone https://github.com/ShirkNeko/SukiSU_patch.git --depth 1
          cd kernel_platform
          echo "Ê≠£Âú®ÊãâÂèñsusfsË°•‰∏Å"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          cd ./common
          GKI_V="${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}"
          SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')

          if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
            echo "‰øÆÂ§çÂÜÖÊ†∏ÁâàÊú¨5.15.0Âà∞5.15.123‰ªÖÊîØÊåÅÊóßÁâàCÂ∫ìÈÄ†ÊàêÁöÑ‰∏Ä‰∫õbug"
            curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
            patch -p1 < fix_5.15.legacy.patch
            echo "fix_5.15_patchÂÆåÊàê"
          fi
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
          file="${{ github.event.inputs.FILE }}"

          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
            echo "Ê≠£Âú®ÊâìsusfsË°•‰∏Å"
            patch -p1 < 50_add_susfs_in_gki-${{ env.KANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            echo "susfs_patchÂÆåÊàê"
          fi

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "Ê≠£Âú®ÊâìÈöêËóèÂ∫îÁî®Ë°•‰∏Å"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "ÈöêËóèÂ∫îÁî®_patchÂÆåÊàê"

      # OGKIËΩ¨Êç¢GKIÔºåÊó†ÈúÄ‰øÆÊîπ dtbo ÂºÄÊú∫
      - name: Apply Convert HMBIRD_OGKI to HMBIRD_GKI
        if: ${{ env.KERNEL_VERSION == '6.6' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          blacklist="${{ github.event.inputs.BLACK_LIST }}"
          if [ "$blacklist" != "blacklist_module_danger.patch" ] && [ "$blacklist" != "haruhi_blacklist.patch" ]; then
              sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
              wget https://github.com/reigadegr/sun_action/raw/main/patchs/6.6/hmbird_patch.patch
              echo "Ê≠£Âú®ÊâìOGKIËΩ¨Êç¢GKIË°•‰∏Å"
              patch -p1 -F 3 < hmbird_patch.patch
              echo "OGKIËΩ¨Êç¢GKI_patchÂÆåÊàê"
          else
              echo "‰ΩøÁî®$blacklist‰∏çÈúÄË¶ÅÊâìË°•‰∏Å"
          fi

      - name: Apply HOOK
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
            echo "Ë∞ÉÁî® kprobe Èí©Â≠ê"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            echo "Ë∞ÉÁî® manual Èí©Â≠ê"
            patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
            url="https://github.com/reigadegr/sun_action/raw/main/patchs/6.6/sukisu_tracepoint_hook.patch"
            cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./ || wget "$url"
            echo "Ë∞ÉÁî® tracepoint Èí©Â≠ê"
            patch -p1 -F 3 < "$(basename $url)" || patch -p1 -F 3 < tracepoint_hooks.patch
          fi

      - name: Remove OnePlus Kernel Module
        run: |          
          cd kernel_workspace/kernel_platform/common       
          git add  . && git commit -m "auto commit"
          patch_profile="${{ github.event.inputs.BLACK_LIST }}"
          wget https://github.com/reigadegr/sun_action/raw/main/patchs/6.6/blacklist_module_profile/"$patch_profile" || true
          patch -p1 -F 3 < "./$patch_profile" && git add  . && git commit -m "auto commit" || git reset --hard
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./build.config.gki
          echo "ÁßªÈô§ÂÜÖÊ†∏Ê®°ÂùóÂÆåÊàê"

      - name: Fix upstream bugs
        # if: ${{ github.event.inputs.FIX_UPSTREAM == 'true' }}
        run: |          
          cd kernel_workspace/kernel_platform/common
          git add  . && git commit -m "auto commit"
          for i in "fix_screen_off_crash.patch" \
            "fix_screen_flicker.patch" \
            "unlock_cpufreq.patch" \
            "fix_usb_network_share.patch" \
            "ignore_module_check.patch" \
            "enable_sme.patch"; do
             wget https://github.com/reigadegr/sun_action/raw/main/patchs/6.6/$i
             patch -p1 -F 3 < $i && git add  . && git commit -m "auto commit" || git reset --hard
             git clean -df
          done

      # ÈÖçÁΩÆ‰ø°ÊÅØ,Â∏¶*‰∏∫ÈôÑÂä†È°πÁõÆ,ÂÖ∑Êúâ‰∏ÄÂÆöÂç±Èô©ÊÄßÂíå‰∏çÁ°ÆÂÆöÊÄß
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"

          # SukiSU UltraÈÖçÁΩÆ
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"

          # KPMÈÖçÁΩÆ
          if [ "${{ github.event.inputs.KPM }}" = "true" ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          fi

          # HOOKÈÖçÁΩÆ
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE" 
          fi

          # SUSFSÈÖçÁΩÆ
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          fi

          # TMPFSÈÖçÁΩÆ*
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          
          # BBRÈÖçÁΩÆ*
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_CUBIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> "$CONFIG_FILE"
          
          # ECNÈÖçÁΩÆ*
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          
          # lto thinÔºåO2 
          echo "CONFIG_LTO_CLANG_THIN=n" >> "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG=n" >> "$CONFIG_FILE"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=n" >> "$CONFIG_FILE"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n" >> "$CONFIG_FILE"
          echo "CONFIG_LLVM_POLLY=n" >> "$CONFIG_FILE"
          echo "CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=n" >> "$CONFIG_FILE"
          echo "CONFIG_AUTOFDO_CLANG=y" >> "$CONFIG_FILE"
          
          # Inline zram                   
          echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_DEF_COMP_ZSTD=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_DEF_COMP=\"zstd\"" >> "$CONFIG_FILE"
          
          
          # cmdline‰ºòÂåñÊÄßËÉΩ
          echo "CONFIG_CMDLINE=\"console=ttynull nokaslr stack_depot_disable=on cgroup_disable=pressure kasan=off kvm-arm.mode=protected bootconfig thp_anon=16K-2M:always mitigations=off kpti=0 hardened_usercopy=off audit=0 norandmaps arm64.nobti arm64.nomte arm64.nopauth\"" >> "$CONFIG_FILE"
          echo "CONFIG_CMDLINE_FROM_BOOTLOADER=n" >> "$CONFIG_FILE"
          echo "CONFIG_CMDLINE_EXTEND=y" >> "$CONFIG_FILE"
          
          # Èò≤Ê≠¢ÂçïÁÇπÊïÖÈöúÂØºËá¥Á≥ªÁªüÂ¥©Ê∫É
          echo "CONFIG_PANIC_ON_OOPS=n" >> "$CONFIG_FILE"
          echo "CONFIG_PANIC_ON_OOPS_VALUE=0" >> "$CONFIG_FILE"
          blacklist="${{ github.event.inputs.BLACK_LIST }}"
          if [ "$blacklist" = "blacklist_module_danger.patch" ] || [ "$blacklist" = "haruhi_blacklist.patch" ]; then
              # qcom llcc
              echo "CONFIG_QCOM_LLCC=y" >> "$CONFIG_FILE"
              # walt scheduler
              echo "CONFIG_SCHED_WALT=y" >> "$CONFIG_FILE"
          else
              echo "CONFIG_QCOM_LLCC=n" >> "$CONFIG_FILE"
              # walt scheduler
              echo "CONFIG_SCHED_WALT=n" >> "$CONFIG_FILE"
          fi
          
          echo "CONFIG_IP_SET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_IPMARK=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_IPMAC=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_MAC=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_LIST_SET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_NAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_TARGET_NPT=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> "$CONFIG_FILE"
          
          echo "CONFIG_NET_EMATCH_IPSET=y" >> "$CONFIG_FILE"
          echo "CONFIG_BPF_STREAM_PARSER=y" >> "$CONFIG_FILE"          
          echo "CONFIG_NETFILTER_XT_SET=y" >> "$CONFIG_FILE"     
          
          # ÈÄèÊòéÂ§ßÈ°µ
          echo "CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS=y" >> "$CONFIG_FILE"   
          echo "CONFIG_TRANSPARENT_HUGEPAGE_MADVISE=n" >> "$CONFIG_FILE"
          
          echo "CONFIG_CFI_PERMISSIVE=y" >> "$CONFIG_FILE"
          echo "CONFIG_SLAB_MERGE_DEFAULT=y" >> "$CONFIG_FILE"
          echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> "$CONFIG_FILE"
          echo "CONFIG_DMABUF_HUGETLB=y" >> "$CONFIG_FILE"
          echo "CONFIG_ARM64_SME=y" >> "$CONFIG_FILE"
          
          echo "CONFIG_PCIEASPM_POWER_SUPERSAVE=y" >> "$CONFIG_FILE"
          echo "CONFIG_KFENCE_STATIC_KEYS=y" >> "$CONFIG_FILE"
          
          # Ê®°ÂùóÁ≠æÂêçÊ†°È™å          
          echo "CONFIG_MODULE_SIG_PROTECT=n" >> "$CONFIG_FILE"
          
          # ÂπΩÁÅµÊºèÊ¥û
          echo "CONFIG_MITIGATE_SPECTRE_BRANCH_HISTORY=n" >> "$CONFIG_FILE"
          echo "CONFIG_UNMAP_KERNEL_AT_EL0=n" >> "$CONFIG_FILE"

          # ÂÜÖÊ†∏ÈùôÊÄÅÂ≠óÊÆµÂè™ËØª(ÈªòËÆ§ÂºÄÂêØ‰øùÊä§)
          echo "CONFIG_RODATA_FULL_DEFAULT_ENABLED=y" >> "$CONFIG_FILE"

          # # ÂÖ≥Èó≠ÈÉ®ÂàÜÂÆâÂÖ®ÁâπÊÄß(ÂºÄÂêØ‰πü‰ºöÂØºËá¥ÂêÑÁßçÁ¨¶Âè∑ÁâàÊú¨ÈîôËØØ)
          # echo "CONFIG_SLAB_FREELIST_RANDOM=n" >> "$CONFIG_FILE"
          # echo "CONFIG_SHUFFLE_PAGE_ALLOCATOR=n" >> "$CONFIG_FILE"
          # echo "CONFIG_SLAB_FREELIST_HARDENED=n" >> "$CONFIG_FILE"
          
          # # Â†ÜÊ†à‰øùÊä§ÂÖ≥Èó≠
          # echo "CONFIG_STACKPROTECTOR_PER_TASK=n" >> "$CONFIG_FILE"
          
          # ‰ºòÂåñÂÜÖÂ≠òÁ≠ñÁï•(ÊîæÂøÉÂºÄÂêØ)
          echo "CONFIG_RCU_LAZY_DEFAULT_OFF=n" >> "$CONFIG_FILE"
          echo "CONFIG_TASKS_TRACE_RCU_READ_MB=y" >> "$CONFIG_FILE"
          echo "CONFIG_RCU_NOCB_CPU_DEFAULT_ALL=y" >> "$CONFIG_FILE"
          echo "CONFIG_ANON_MIN_RATIO=5" >> "$CONFIG_FILE"
          echo "CONFIG_CLEAN_LOW_RATIO=2" >> "$CONFIG_FILE"
          echo "CONFIG_CLEAN_MIN_RATIO=1" >> "$CONFIG_FILE"
          
          # Âçé‰∏∫auth qos
          echo "CONFIG_AUTHORITY_CTRL=y" >> "$CONFIG_FILE"
          echo "CONFIG_QOS_CTRL=y" >> "$CONFIG_FILE"
          echo "CONFIG_QOS_AUTHORITY=y" >> "$CONFIG_FILE"
          echo "CONFIG_QOS_POLICY_MAX_NR=5" >> "$CONFIG_FILE"
                    
          echo "CONFIG_UDMABUF=y" >> "$CONFIG_FILE"
          # # Á¶ÅÁî®ioË∞ÉÂ∫¶Âô®
          echo "CONFIG_MQ_IOSCHED_KYBER=n" >> "$CONFIG_FILE"
          
          # ÊéßÂà∂ÂèØÈÄâÂäüËÉΩ(ÊîæÂøÉ‰ΩøÁî®Êú¨‰ª£Á†Å)
          echo "CONFIG_DAMON=n" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_SHA1_ARM64_CE=y" >> "$CONFIG_FILE"
          echo "CONFIG_VIRTIO_PCI_LEGACY=y" >> "$CONFIG_FILE"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y" >> "$CONFIG_FILE"
          echo "CONFIG_HEADERS_INSTALL=n" >> "$CONFIG_FILE"
          echo "CONFIG_PROC_MEM_ALWAYS_FORCE=n" >> "$CONFIG_FILE"
          
          echo "CONFIG_DTPM=n" >> "$CONFIG_FILE"
          echo "CONFIG_IDLE_INJECT=n" >> "$CONFIG_FILE"
     
          # Êó†Áî®kunit
          echo "CONFIG_FAT_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_EXT4_KUNIT_TESTS=n" >> "$CONFIG_FILE"          
          echo "CONFIG_RTC_LIB_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_CLK_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_CLK_GATE_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_IIO_FORMAT_KUNIT_TESTAULT=n" >> "$CONFIG_FILE"          
          echo "CONFIG_INPUT_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_SND_SOC_UTILS_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_HID_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_REGMAP_KUNIT=n" >> "$CONFIG_FILE"
          echo "CONFIG_TIME_KUNIT_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_NETDEV_ADDR_LIST_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_IIO_FORMAT_KUNIT_TEST=n" >> "$CONFIG_FILE"

          # ‰øÆÂêÑÁßçabi‰∏çÂÖºÂÆπ
          # ËìùÁâô
          patch_profile="${{ github.event.inputs.BLACK_LIST }}"
          if [ "$patch_profile" = "blacklist_module_danger.patch" ] || [ "$patch_profile" = "blacklist_module.patch" ] || [ "$patch_profile" = "scx_enable.patch" ] ; then
              echo "CONFIG_RFKILL=y" >> "$CONFIG_FILE"
              echo "CONFIG_BT=y" >> "$CONFIG_FILE"
              echo "CONFIG_BT_RFCOMM=y" >> "$CONFIG_FILE"
              echo "CONFIG_BT_HIDP=y" >> "$CONFIG_FILE"
              echo "CONFIG_TLS=y" >> "$CONFIG_FILE"
          fi
          
          # ÁßªÈô§Êó†ÊÑè‰πâÁöÑÂÜÖÂÆπ
          echo "CONFIG_UBSAN=n">> "$CONFIG_FILE"
          echo "CONFIG_UBSAN_TRAP=n" >> "$CONFIG_FILE"
          echo "CONFIG_UBSAN_BOUNDS=n" >> "$CONFIG_FILE"
          echo "CONFIG_IKHEADERS=n" >> "$CONFIG_FILE"
          # ÁßªÈô§ÊûÑÂª∫ÂÆ°Êü•
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      - name: Build Kernel aosp clang21
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          # ÂÆâË£Ö‰æùËµñÂ∑•ÂÖ∑
          # sudo apt install -y lld
          cd kernel_workspace/kernel_platform/common
          
          # ÂÆâË£ÖËá™ÂÆö‰πâclang
          mkdir cust_clang; cd cust_clang
          wget -q https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip
          unzip build*.zip >/dev/null

          wget -q https://github.com/ESK-Project/aosp_clang_mirror/releases/download/clang-r563880b-13818152/clang-r563880b.tar.gz
          tar -zxvf *.tar.gz > /dev/null
          ls -al
          cd  ..
          export cust_clang="$(realpath ./cust_clang/bin)"
          sudo -E chmod -R +x "$cust_clang"
          export PATH="$cust_clang:$PATH"
          echo $PATH
          export CC="$(realpath ./cust_clang/bin/clang)" LTO="thin"
          export CC="ccache $CC" LTO="thin"
          export PAHOLE="$(realpath ./cust_clang/build-tools/bin/pahole)"
          MAKE_ARGS="LLVM=1 LLVM_IAS=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
            RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            LD=ld.lld HOSTLD=ld.lld KCFLAGS+=-Wno-error"
          FDO_FILE="$(realpath ./android/gki/aarch64/afdo/kernel.afdo)"
          EXTRA_FLAGS="CLANG_AUTOFDO_PROFILE=$FDO_FILE"
          echo $EXTRA_FLAGS
          echo "ËøôÈáåÊòæÁ§∫fdoÊñá‰ª∂: $(ls $FDO_FILE)"
          make -j$(nproc --all) O=out $MAKE_ARGS $EXTRA_FLAGS gki_defconfig all 2>&1 | tee  ../../../build.txt
          for i in $(find  . -type f -name ".config"); do
             cp $i  ../../../config.txt
          done
          git log | head -n 200 > ../../../commit.txt
          # ÊòæÁ§∫ ccache ÁªüËÆ°‰ø°ÊÅØ
          ccache -s
          
      - name: Make AnyKernel3
        run: |
          git clone https://github.com/reigadegr/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          cp "$CONFIG_FILE" ./AnyKernel3 || echo "Â§çÂà∂gki_defconfigÂ§±Ë¥•"
          cp *build.txt ./AnyKernel3 || echo "Â§çÂà∂logÂ§±Ë¥•"
          cp config.txt ./AnyKernel3 || echo "Â§çÂà∂configÂ§±Ë¥•"
          cp commit.txt ./AnyKernel3 || echo "Â§çÂà∂commitÂ§±Ë¥•"
          mkdir -p kernel_workspace/kernel_platform/out/Final-Image-Find/
          dir1=""
          dir2=""
          image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          if [ -n "$image_path" ]; then
            dir1=$(dirname "$image_path")/
            echo "‰ΩøÁî® make ÁºñËØëÁöÑÁªü‰∏ÄË∑ØÂæÑÔºåÊàêÂäüÊâæÂà∞ Image Êñá‰ª∂"
          else
            image_path=$(find "./kernel_workspace/kernel_platform/out/" -name "Image" | head -n 1)
            if [ -n "$image_path" ]; then
              dir2=$(dirname "$image_path")
              echo "‰ΩøÁî®ÂÆòÊñπËÑöÊú¨ÁºñËØëÔºåÊàêÂäüÊâæÂà∞ Image Êñá‰ª∂"
            else
              echo "Êú™ÊâæÂà∞ Image Êñá‰ª∂ÔºåÊûÑÂª∫Â§±Ë¥•" >&2
              exit 1
            fi
          fi
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            echo "Image file finally located at: $image_path"
            cp "$image_path" ./AnyKernel3/Image
            cp "$image_path" kernel_workspace/kernel_platform/out/Final-Image-Find/Image
          fi

      - name: Apply patch_linux and replace Image
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/out/Final-Image-Find
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: Set zip Suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.VFS }}${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.extract_info.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*


      - name: Post-build Disk Check
        run: df -h