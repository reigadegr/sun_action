name: zip_test
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_10_pro_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_pad_pro_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_2_pro
          - oneplus_pad_3
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: perf
        options:
          - gki
          - perf
      SUFFIX:
        type: string
        description: "自定义内核后缀 (留空则使用随机字符串)"
        required: false
        default: "OPMod"
      BUILD_TIME:
        type: string
        description: "自定义构建时间 (留空则使用当前时间)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "是否启用极速构建？"
        required: true
        default: true
      VFS:
        type: boolean
        description: "是否启用手动钩子(VFS)？"
        required: true
        default: false
      KPM:
        type: boolean
        description: "是否启用内核模块(KPM)？"
        required: true
        default: false
      SUSFS_ENABLE:
        type: boolean
        description: "开启susfs"
        required: true
        default: false
      SCHED:
        type: boolean
        description: "是否添加风驰驱动？"
        required: true
        default: false
      ZRAM:
        type: boolean
        description: "是否添加更多的ZRAM算法？"
        required: true
        default: false

jobs:
  get-config:
    uses: ./.github/workflows/file-map.yml
    with:
      FILE: ${{ inputs.FILE }}
    secrets: inherit

  build:
    needs: get-config
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && ' [FAST]' || '' }}${{ github.event.inputs.SCHED == 'true' && ' [SCHED]' || '' }}${{ github.event.inputs.ZRAM == 'true' && ' [ZRAM]' || '' }}For ${{ github.event.inputs.FILE }} ${{ github.event.inputs.BUILD_METHOD }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CPU: ${{ needs.get-config.outputs.CPU }}
      CPUD: ${{ needs.get-config.outputs.CPUD }}
      ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}
      KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Disk Space
        run: |
          df -h
          uname -a

      - name: Debug Show Selected Inputs
        run: |
          echo "Selected CPU: ${{ needs.get-config.outputs.CPU }}"
          echo "Selected FILE: ${{ github.event.inputs.FILE }}"
          echo "Selected CPUD: ${{ needs.get-config.outputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo "Custom BUILD_TIME: ${{ github.event.inputs.BUILD_TIME }}"
          echo "Selected SUSFS_ENABLE: ${{ github.event.inputs.SUSFS_ENABLE }}"
          echo "Selected VFS: ${{ github.event.inputs.VFS }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"       
          echo "Selected ZRAM: ${{ github.event.inputs.ZRAM }}"
          echo "Selected SCHED: ${{ github.event.inputs.SCHED }}"

      - name: Setup TimeZone
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Set Cache Environment
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FILE }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FILE }}"
          echo "set: $HOME/.ccache_${{ github.event.inputs.FILE }}"

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Set APT Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/xaga_mksu.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          sudo apt update
          sudo apt install zip unzip git python3-telethon python-is-python3

      - name: Install Repo Tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1

      - name: Upload to telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          cd AnyKernel3
          zip -9 -rq OPMOD_Kernel_MKSU_$(date +"%Y-%m-%d_%H:%M:%S") .
          wget https://github.com/reigadegr/sun_action/raw/main/tgbot.py        
          python3 "$(realpath ./tgbot.py)" "$(realpath ./xaga_mksu.zip)" && exit 0 || true

      - name: Post-build Disk Check
        run: df -h
