name: xaga_suki_clang21
on:
  workflow_dispatch:
    inputs:
      FILE:
        type: choice
        description: "配置文件"
        required: true
        default: oneplus_10_pro_v
        options:
          - oneplus_10_pro_v
      BUILD_METHOD:
        type: choice
        description: "编译方式"
        required: true
        default: perf
        options:
          - gki
          - perf
      SUFFIX:
        type: string
        description: "自定义内核后缀 (留空则使用随机字符串)"
        required: false
        default: "OPMod"
      BUILD_TIME:
        type: string
        description: "自定义构建时间 (留空则使用当前时间)"
        required: false
        default: ""
      FAST_BUILD:
        type: boolean
        description: "是否启用极速构建？"
        required: true
        default: true
      HOOK:
        type: choice
        description: "钩子选择"
        required: true
        default: tracepoint
        options:
          - kprobe
          - manual
          - tracepoint
      KPM:
        type: boolean
        description: "是否启用内核模块(KPM)？"
        required: true
        default: true
      SUSFS_ENABLE:
        type: boolean
        description: "开启susfs"
        required: true
        default: true
      SCHED:
        type: boolean
        description: "是否添加风驰驱动？"
        required: true
        default: false

jobs:
  get-config:
    uses: ./.github/workflows/file-map.yml
    with:
      FILE: ${{ inputs.FILE }}
    secrets: inherit

  build:
    needs: get-config
    name: ${{ github.event.inputs.FAST_BUILD == 'true' && ' [FAST]' || '' }}${{ github.event.inputs.SCHED == 'true' && ' [SCHED]' || '' }}For ${{ github.event.inputs.FILE }} ${{ github.event.inputs.BUILD_METHOD }} ${{ github.event.inputs.SUFFIX }}
    runs-on: ubuntu-latest
    env:
      CPU: ${{ needs.get-config.outputs.CPU }}
      CPUD: ${{ needs.get-config.outputs.CPUD }}
      ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}
      KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Disk Space
        run: |
          df -h
          uname -a

      - name: Debug Show Selected Inputs
        run: |
          echo "Selected CPU: ${{ needs.get-config.outputs.CPU }}"
          echo "Selected FILE: ${{ github.event.inputs.FILE }}"
          echo "Selected CPUD: ${{ needs.get-config.outputs.CPUD }}"
          echo "Selected ANDROID_VERSION: ${{ needs.get-config.outputs.ANDROID_VERSION }}"
          echo "Selected KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}"
          echo "Selected BUILD_METHOD: ${{ github.event.inputs.BUILD_METHOD }}"
          echo "Custom SUFFIX: ${{ github.event.inputs.SUFFIX }}"
          echo "Custom BUILD_TIME: ${{ github.event.inputs.BUILD_TIME }}"
          echo "Selected SUSFS_ENABLE: ${{ github.event.inputs.SUSFS_ENABLE }}"
          echo "Selected HOOK: ${{ github.event.inputs.HOOK }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"       
          echo "Selected SCHED: ${{ github.event.inputs.SCHED }}"

      - name: Setup TimeZone
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Set Cache Environment
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FILE }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FILE }}"
          echo "set: $HOME/.ccache_${{ github.event.inputs.FILE }}"

      - name: Configure Git
        run: |
          git config --global user.name "Numbersf"
          git config --global user.email "263623064@qq.com"

      - name: Configure APTC
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: Set APT Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/xaga_sukisu.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            lsb-release linux-modules-extra-"$(uname -r)" ccache pahole \
            git automake flex bison build-essential zlib1g-dev make \
            libelf-dev libssl-dev openssl bc device-tree-compiler gzip \
            python3-telethon python-is-python3 zip unzip zstd libzstd-dev pigz \
            libncurses-dev asciidoc dos2unix lz4 fakeroot python3 python3-pip \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi gcc-arm-linux-gnueabihf \
            libc6-dev-armel-cross libc6-dev-armhf-cross libc6-dev-arm64-cross
          sudo -E apt-get clean
          df -h

      - name: Optimize Memory Management
        run: |
          sudo -E sysctl vm.swappiness=1
          sudo -E sysctl vm.min_free_kbytes=32768
          sudo -E sysctl vm.watermark_scale_factor=100
          sudo -E sysctl vm.watermark_boost_factor=15000
          sudo -E sysctl vm.overcommit_memory=1
          sudo -E sysctl vm.page-cluster=0
          sudo -E modprobe zram
          echo "0" | sudo -E tee /sys/class/block/zram0/mem_limit
          echo "zstd" | sudo -E tee /sys/class/block/zram0/comp_algorithm
          echo "$(awk 'NR==1{print $2*1000}' </proc/meminfo)" | sudo -E tee /sys/class/block/zram0/disksize
          sudo -E mkswap /dev/zram0
          sudo -E swapon -p 100 /dev/zram0
          echo "Y" | sudo -E tee /sys/kernel/mm/lru_gen/enabled
          echo "1000" | sudo -E tee /sys/kernel/mm/lru_gen/min_ttl_ms
          echo "1" | sudo -E tee /sys/kernel/mm/swap/vma_ra_enabled

      - name: Restore Ccache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref_name }}-${{ github.event.inputs.FILE }}-${{ github.event.inputs.BUILD_METHOD }}-${{ github.event.inputs.FAST_BUILD == 'true' && 'fast' || 'slow' }}-${{ github.event.inputs.KPM == 'true' && 'kpm' || 'nonkpm' }}-${{ github.event.inputs.SUSFS_ENABLE == 'true' && 'susfs' || 'nonsusfs' }}

      - name: Initialize Ccache
        run: |
          INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache (${{ env.CCACHE_DIR }})..."
              mkdir -p "${{ env.CCACHE_DIR }}"
              ccache -M ${{ env.CCACHE_MAXSIZE }}
              touch "$INIT_FLAG"
              echo "ccache 初始化完成"
            else
              echo "ccache 已初始化，跳过"
            fi
          else
            echo "未安装 ccache，跳过"
          fi
          ccache -s

      - name: Install Repo Tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize Repo and Sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          mkdir kernel_platform && cd kernel_platform
          # repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ needs.get-config.outputs.CPU }} -m ${{ github.event.inputs.FILE }}.xml --depth=1
          # repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          # git clone --depth 1 https://github.com/reigadegr/android_kernel_xiaomi_mt6895 -b v3 common2 &
          export MY_PAT="${{ secrets.MY_PAT }}"
          git clone --depth 1 https://reigadegr:${MY_PAT}@github.com/reigadegr/lineage_xaga -b v3 common
          # repo init --depth 1 -u https://android.googlesource.com/kernel/manifest -b common-android12-5.10
          # repo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync
          # rm -rf common .repo
          
          until [ -z "$(pidof git)" ]; do
            echo "等一下git"
            sleep 1
          done

          cd common; git log; cd  ..; pwd; ls
          
          cd  ..; pwd; ls
          if [  -e kernel_platform/common/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [  -e kernel_platform/msm-kernel/BUILD.bazel ]; then
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      # 自定义内核后缀
      - name: Custom Kernel Suffix if set
        if: ${{ github.event.inputs.SUFFIX != '' }}
        run: |
          cd kernel_workspace
          SUFFIX="${{ github.event.inputs.SUFFIX }}"
          ANDROID_VERSION="${{ needs.get-config.outputs.ANDROID_VERSION }}"
          FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            echo "Modifying: $path"

            # 删除 -dirty
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "Detected NEW setlocalversion format"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${ANDROID_VERSION}-${SUFFIX}\"|" "$path"

            elif grep -q 'echo "\$res"' "$path"; then
              echo "Detected OLD setlocalversion format"
              if [ "$FAST_BUILD" = "true" ]; then
                echo "FAST_BUILD enabled: using static res"
                sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${SUFFIX}\"/" "$path"
              else
                echo "Standard build: injecting suffix via cut/echo"
                  if [[ -f ./kernel_platform/build_with_bazel.py ]]; then
                  echo "使用官方脚本编译且当使用 build_with_bazel 时，可能受特殊符号数量限制，编译失败请修改"
                  echo "When using the official script and building with build_with_bazel, the build may fail due to a limit on the number of special characters. Please modify the configuration if that happens."
                  fi
                tac "$path" | sed "0,/echo \"\\\$res\"/s//res=\\\$(echo \\\$res | cut -d- -f1-2)-${SUFFIX}; echo \"\\\$res\";/" | tac > "$path.tmp" && mv "$path.tmp" "$path"
              fi
            else
              echo "Unknown format, appending echo manually"
              echo "echo \"\$res-${SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done

          # git add -A
          # git commit -m "Custom suffix & removed -dirty"

      # 自动生成随机后缀（仅在 SUFFIX 未设置时生效）*
      - name: Custom Kernel Random Suffix if empty
        if: ${{ github.event.inputs.SUFFIX == '' }}
        run: |
          cd kernel_workspace
          ANDROID_VERSION="${{ needs.get-config.outputs.ANDROID_VERSION }}"
          FAST_BUILD="${{ github.event.inputs.FAST_BUILD }}"

          # 生成随机数字和随机hash后缀
          RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
          RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
          RANDOM_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"

          for path in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            echo "Modifying: $path"

            # 删除 -dirty
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "Detected NEW setlocalversion format"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${ANDROID_VERSION}-${RANDOM_SUFFIX}\"|" "$path"

            elif grep -q 'echo "\$res"' "$path"; then
              echo "Detected OLD setlocalversion format"
              if [ "$FAST_BUILD" = "true" ]; then
                echo "FAST_BUILD enabled: using static res with random suffix"
                sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${RANDOM_SUFFIX}\"/" "$path"
              else
                echo "Standard build: injecting random suffix via cut/echo"
                tac "$path" | sed "0,/echo \"\\\$res\"/s//res=\\\$(echo \\\$res | cut -d- -f1-2)-${RANDOM_SUFFIX}; echo \"\\\$res\";/" | tac > "$path.tmp" && mv "$path.tmp" "$path"
              fi
            else
              echo "Unknown format, appending echo manually"
              echo "echo \"\$res-${RANDOM_SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done

          # git add -A
          # git commit -m "Random suffix & remove -dirty"

      - name: Add SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          else
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s main
          fi
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply Patches SukiSU Ultra
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }} --depth 1
          git clone https://github.com/ShirkNeko/SukiSU_patch.git --depth 1
          cd kernel_platform
          echo "正在拉取susfs补丁"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          cd ./common
          GKI_V="${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }}"
          SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ')

          if [ "$GKI_V" == "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
            echo "修复内核版本5.15.0到5.15.123可能存在的一些遗留问题"
            curl -Lo fix_5.15.legacy.patch --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
            patch -p1 < fix_5.15.legacy.patch
            echo "fix_5.15_patch完成"
          fi
          KERNEL_VERSION="${{ needs.get-config.outputs.KERNEL_VERSION }}"
          file="${{ github.event.inputs.FILE }}"
          TRUSTY_EXISTS="false"
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            if grep -qr 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${file}.xml"; then
              TRUSTY_EXISTS="true"
            fi
            echo "trusty_exists=$TRUSTY_EXISTS" >> $GITHUB_OUTPUT
          fi
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              echo "正在打susfs补丁"
              patch -p1 < 50_add_susfs_in_gki-${{ needs.get-config.outputs.ANDROID_VERSION }}-${{ needs.get-config.outputs.KERNEL_VERSION }}.patch || true
              echo "susfs_patch完成"
          fi

      - name: Apply Hide Stuff Patches
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "隐藏应用_patch完成"

      - name: Apply HOOK
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
            echo "调用 kprobe 钩子"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            echo "调用 manual 钩子"
            patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
            cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./ || wget https://github.com/sch-lda/SukiSU_patch/raw/main/hooks/sukisu_tracepoint_hooks.patch
            echo "调用 tracepoint 钩子"
            patch -p1 -F 3 < sukisu_tracepoint_hooks.patch
          fi

      # 配置信息
      - name: Add Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ needs.get-config.outputs.KERNEL_VERSION }}"

          # SukiSU Ultra配置
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [ "${{ github.event.inputs.KPM }}" = 'true' ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
            echo "开启kpm"
          else
            echo "CONFIG_KPM=n" >> "$CONFIG_FILE"
            echo "关闭kpm"
          fi

          # HOOK配置
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE" 
          fi

          # SUSFS配置
          if [ "${{ github.event.inputs.SUSFS_ENABLE }}" = "true" ]; then
              echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
              echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          fi
          # TMPFS配置*
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

          # BBR配置*
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
          
          echo "CONFIG_DEFAULT_CUBIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> "$CONFIG_FILE"

          # ssg
          echo "CONFIG_MQ_IOSCHED_SSG=y" >> "$CONFIG_FILE"
          echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> "$CONFIG_FILE"
          
          # lto thin
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG=y" >> "$CONFIG_FILE"
          
          # 幽灵漏洞
          echo "CONFIG_MITIGATE_SPECTRE_BRANCH_HISTORY=n" >> "$CONFIG_FILE"
          echo "CONFIG_UNMAP_KERNEL_AT_EL0=n" >> "$CONFIG_FILE"
          
          # 堆栈保护关闭
          # echo "CONFIG_STACKPROTECTOR_PER_TASK=n" >> "$CONFIG_FILE"

          # Inline zram
          echo "CONFIG_ZSMALLOC=m" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM=m" >> "$CONFIG_FILE"
          # echo "CONFIG_ZRAM_DEF_COMP_ZSTD=y" >> "$CONFIG_FILE"
          # echo "CONFIG_ZRAM_DEF_COMP=\"zstd\"" >> "$CONFIG_FILE"

          # ECN配置*
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          
          # 修复符号缺失
          echo "CONFIG_MTK_CPUQOS_V3=y" >> "$CONFIG_FILE"
          
          # 移除无意义的内容
          echo "CONFIG_UBSAN=n">> "$CONFIG_FILE"
          echo "CONFIG_UBSAN_TRAP=n" >> "$CONFIG_FILE"
          echo "CONFIG_UBSAN_BOUNDS=n" >> "$CONFIG_FILE"
          echo "CONFIG_IKHEADERS=n" >> "$CONFIG_FILE"
          
          # 移除构建审查
          sed -i 's/check_defconfig//' ./common/build.config.gki

      # 自定义内核构建时间，无需加入多余的时间前缀
      - name: Custom BUILD_TIME
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.BUILD_TIME }}" ]; then
            DATESTR="${{ github.event.inputs.BUILD_TIME }}"
            echo "KBUILD_BUILD_TIMESTAMP=${DATESTR}" >> "$GITHUB_ENV"
            echo "KBUILD_BUILD_VERSION=1" >> "$GITHUB_ENV"
            cd kernel_workspace/kernel_platform/
            for f in common/scripts/mkcompile_h msm-kernel/scripts/mkcompile_h; do
              if [ -f "$f" ]; then
                echo "Patching mkcompile_h with BUILD_TIME=$DATESTR"
                if grep -q 'UTS_VERSION=' "$f"; then
                  perl -pi -e "s{UTS_VERSION=\"\\\$\\(.*?\\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $DATESTR\"}" "$f"
                else
                  perl -0777 -pi -e "s{cat <<EOF}{cat <<EOF\n#undef UTS_VERSION\n#define UTS_VERSION \"#1 SMP PREEMPT $DATESTR\" } unless /UTS_VERSION/" "$f"
                fi
              fi
            done
          fi

      - name: Build Kernel aosp clang21
        run: |
          export PATH="/usr/lib/ccache:$PATH"
          # 安装依赖工具
          # sudo apt install -y lld
          cd kernel_workspace/kernel_platform/common
          
          # 安装自定义clang
          mkdir cust_clang; cd cust_clang
          wget -q https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip
          unzip build*.zip >/dev/null

          wget -q https://github.com/ESK-Project/aosp_clang_mirror/releases/download/clang-r563880b-13818152/clang-r563880b.tar.gz
          tar -zxvf *.tar.gz > /dev/null
          ls -al
          cd  ..
          export cust_clang="$(realpath ./cust_clang/bin)"
          sudo -E chmod -R +x "$cust_clang"
          export PATH="$cust_clang:$PATH"
          echo $PATH
          export CC="$(realpath ./cust_clang/bin/clang)" LTO="thin"
          export CC="ccache $CC" LTO="thin"
          export PAHOLE="$(realpath ./cust_clang/build-tools/bin/pahole)"
          MAKE_ARGS="LLVM=1 LLVM_IAS=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
            LD=ld.lld HOSTLD=ld.lld KCFLAGS+=-Wno-error"
          make -j$(nproc --all) O=out $MAKE_ARGS gki_defconfig all 2>&1 | tee  ../../../build.txt
          for i in $(find  . -type f -name ".config"); do
             cp $i  ../../../config.txt
          done
          git log | head -n 200 > ../../../commit.txt
          # 显示 ccache 统计信息
          ccache -s

      - name: Fallback to Build Kernel
        if: ${{ github.event.inputs.FAST_BUILD == 'false' || steps.fast_build.outputs.fallback == 'true' }}
        run: |
          cd kernel_workspace
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ needs.get-config.outputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
            ./kernel_platform/build_with_bazel.py --lto=thin -t ${{ needs.get-config.outputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          else
            LTO=thin SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0 \
            ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ needs.get-config.outputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          fi

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/reigadegr/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cp *build.txt ./AnyKernel3 || echo "复制log失败"
          cp config.txt ./AnyKernel3 || echo "复制config失败"
          cp *ko  ./AnyKernel3 || echo "复制ko失败"
          mkdir -p kernel_workspace/kernel_platform/out/FinalImageFind/
          dir1=""
          dir2=""
          image_path=$(find "./kernel_workspace/kernel_platform/" -name "Image" | head -n 1)
          if [ -n "$image_path" ]; then
            dir1=$(dirname "$image_path")/
            echo "使用 make 编译的统一路径，成功找到 Image 文件"
          else
            image_path=$(find "./kernel_workspace/kernel_platform/out/" -name "Image" | head -n 1)
            if [ -n "$image_path" ]; then
              dir2=$(dirname "$image_path")/
              echo "使用官方脚本编译，成功找到 Image 文件"
            else
              echo "未找到 Image 文件，构建失败" >&2
              exit 1
            fi
          fi

          # 复制 Image 到 AnyKernel3
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            echo "Image file finally located at: $image_path"
            cp "$image_path" ./AnyKernel3/Image
            cp "$image_path" kernel_workspace/kernel_platform/out/FinalImageFind/Image
          fi

          # 使用官方脚本编译的 sm8750，选择性复制其它镜像文件
          if [ -n "$dir2" ] && [ "${{ needs.get-config.outputs.CPU }}" = "sm8750" ] && [ "${{ github.event.inputs.FAST_BUILD }}" = "false" ]; then
            echo "当前正在使用官方脚本构建 sm8750，需额外复制一些其它镜像文件：dtbo.img、system_dlkm.img、vendor_dlkm.img、vendor_boot.img。请注意，如果你在刷完官方脚本构建后想换成极速构建，请还原这些分区！"
            echo "You are currently building sm8750 with the official script. Additional image files will be copied: dtbo.img, system_dlkm.img, vendor_dlkm.img, vendor_boot.img. Please note: If you switch to fast build after flashing this build, make sure to restore these partitions!"
            for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
              if [ -f "$dir2$file" ]; then
                target_name="$file"
                # 特殊处理 system_dlkm.erofs.img 的目标名
                if [ "$file" = "system_dlkm.erofs.img" ]; then
                  target_name="system_dlkm.img"
                fi
                cp "$dir2$file" "./AnyKernel3/$target_name"
              else
                echo "$file 不存在，跳过复制"
              fi
            done
          fi

      - name: Apply patch_linux and replace Image
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/out/FinalImageFind
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: Set zip Suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.HOOK  }}${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.SCHED== 'true' && '_SCHED' || '' }}" >> $GITHUB_OUTPUT

      # 从一加源码中获取适用的 Android 版本信息，注意是系统 Android 版本而非你填写的内核 Android 版本，非一加官方源码可能需要修改或删除这一步
      - name: Auto map FILE to Android version by manifest
        id: file_clean
        run: |
          file="${{ github.event.inputs.FILE }}"
          cpu="${{ needs.get-config.outputs.CPU }}"
          xml=".repo/manifests_fallback/${file}.xml"
          cd $GITHUB_WORKSPACE
          # 去掉末尾的 _x（只删一个）
          file_base=$(echo "$file" | sed -E 's/_[a-z]$//')

          # 提取 revision 并解析 Android 版本
          revision_full=$(grep -oP '<project[^>]*name="android_kernel[^"]*"[^>]*revision="\K[^"]+' "$xml" | head -n1 || true)

          if [ -n "$revision_full" ]; then
            android_ver=$(echo "$revision_full" | grep -oP '_v?_?\K([0-9]+\.[0-9]+(?:\.[0-9]+)?)' || true)
            if [ -n "$android_ver" ]; then
              clean_file="${file_base}_Android${android_ver}"
            else
              clean_file="${file_base}_AndroidUnknown"
            fi
          else
            clean_file="${file_base}_AndroidUnknown"
          fi

          echo "value=$clean_file" >> "$GITHUB_OUTPUT"

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.file_clean.outputs.value }}${{ steps.suffix.outputs.value }}
          path: ./AnyKernel3/*

      - name: Upload to telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          KERNEL_VERSION: ${{ needs.get-config.outputs.KERNEL_VERSION }}
        run: |
          path="$(realpath kernel_workspace/kernel_platform/common)"
          commit_hash="$(git -C $path rev-parse --short=6 HEAD)"
          cd AnyKernel3          
          ZIP_NAME=OPMod_Kernel_SukiSU-"$commit_hash"-"$(date +"%H%M%S")".zip
          zip -9 -rq "$ZIP_NAME" .
          wget https://github.com/reigadegr/sun_action/raw/main/tgbot.py
          MD5_VALUE=$(md5sum "$ZIP_NAME" | cut -d' ' -f1)
          READABLE_TIME=$(date +"%m月%d日 %H:%M")
          export DESCRIPTION=$'🧩 内核构建完成！\n\n🔧 内核版本: '"$KERNEL_VERSION"$'\n⏰ 构建时间: '"$READABLE_TIME"$'\n📦 文件名: '"$ZIP_NAME"$'\n🔒 MD5: '"$MD5_VALUE"
          export DESCRIPTION+=$'\n⚠️ CI 构建，未经测试，可能不开机! 请确保您方便救砖后刷入此内核!'
          export DESCRIPTION+=$'\n🤐susfs status: ${{ github.event.inputs.SUSFS_ENABLE }}'
          export DESCRIPTION+=$'\n🥺kpm status: ${{ github.event.inputs.KPM}}'
          python3 "$(realpath ./tgbot.py)" "$(realpath ./"$ZIP_NAME")" && exit 0 || true

      - name: Post-build Disk Check
        run: df -h